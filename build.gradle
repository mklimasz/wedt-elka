apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'nz.ac.waikato.cms.weka', name: 'LibSVM', version: '1.0.10'
    compile group: 'org.deeplearning4j', name: 'deeplearning4j-core', version: '0.8.0'
    compile group: 'org.deeplearning4j', name: 'deeplearning4j-nlp', version: '0.8.0'
    compile group: 'org.nd4j', name: 'nd4j-native-platform', version: '0.8.0'
    compile group: 'uk.ac.gate', name: 'gate-core', version: '8.4'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.2'
    compile group: 'io.vavr', name: 'vavr', version: '0.9.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
}

task cleanSeminars(type: JavaExec) {
    main = 'pl.edu.pw.elka.data.preprocessing.seminars.SeminarCleanTextExtractor'
    args = [project.hasProperty('seminarsDir') ? project.property('seminarsDir'): '',
            project.hasProperty('resultFile') ? project.property('resultFile'): '']
    classpath = sourceSets.main.runtimeClasspath
}

task labelSeminars(type: JavaExec) {
    main = 'pl.edu.pw.elka.data.preprocessing.seminars.SeminarLabelValuePairsExtractor'
    args = [project.hasProperty('seminarsDir') ? project.property('seminarsDir'): '',
            project.hasProperty('cleanSeminarsFile') ? project.property('cleanSeminarsFile'): '',
            project.hasProperty('gatePath') ? project.property('gatePath'): '',
            project.hasProperty('resultFile') ? project.property('resultFile'): '']
    classpath = sourceSets.main.runtimeClasspath
}

task vectorizeSeminars(type: JavaExec) {
    main = 'pl.edu.pw.elka.data.preprocessing.seminars.SeminarVectorMapper'
    args = [project.hasProperty('labelsFile') ? project.property('labelsFile'): '',
            project.hasProperty('vectors') ? project.property('vectors'): '',
            project.hasProperty('resultFile') ? project.property('resultFile'): '']
    classpath = sourceSets.main.runtimeClasspath
}

task cleanConferences(type: JavaExec) {
    main = 'pl.edu.pw.elka.data.preprocessing.conferences.ConferenceCleanTextExtractor'
    args = [project.hasProperty('conferencesDir') ? project.property('conferencesDir'): '',
            project.hasProperty('cleanConferencesFile') ? project.property('cleanConferencesFile'): '']
    classpath = sourceSets.main.runtimeClasspath
}

task labelConferences(type: JavaExec) {
    main = 'pl.edu.pw.elka.data.preprocessing.conferences.ConferenceLabelValuePairsExtractor'
    args = [project.hasProperty('conferencesDir') ? project.property('conferencesDir'): '',
            project.hasProperty('cleanConferencesFile') ? project.property('cleanConferencesFile'): '',
            project.hasProperty('gatePath') ? project.property('gatePath'): '',
            project.hasProperty('resultFile') ? project.property('resultFile'): '']
    classpath = sourceSets.main.runtimeClasspath
}

task svmClassify(type: JavaExec) {
    main = 'pl.edu.pw.elka.svm.SvmPredict'
    args = [project.hasProperty('csvFile') ? project.property('csvFile'): '']
    classpath = sourceSets.main.runtimeClasspath
}

